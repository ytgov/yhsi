#!/usr/bin/env ruby

class DevHelper
  def self.call(*args)
    self.new.call(*args)
  end

  # Core logic
  def call(*args, **kwargs)
    if args.length.zero?
      dc(*args, **kwargs)
    elsif respond_to?(args[0])
      public_send(args[0], *args.drop(1), **kwargs)
    else
      dc(*args, **kwargs)
    end
  end

  def dc(*args, **kwargs)
    environment = kwargs.fetch(:environment, 'development')
    puts "Running: docker-compose -f docker-compose.#{environment}.yml #{args.join(' ')}"
    exec("docker-compose -f docker-compose.#{environment}.yml #{args.join(' ')}")
  end

  def build(*args, **kwargs)
    dc(%w[build], *args, **kwargs)
  end

  def up(*args, **kwargs)
    dc(*%w[up --remove-orphans], *args, **kwargs)
  end

  def down(*args, **kwargs)
    dc(*%w[down --remove-orphans], *args, **kwargs)
  end

  def logs(*args, **kwargs)
    dc(*%w[logs -f], *args, **kwargs)
  end

  # Custom helpers
  def refresh(*args, **kwargs)
    down(*args, **kwargs)
    up(*args, **kwargs)
  end

  def sqlcmd(*args, **kwargs)
    db_host = ENV.fetch('DB_HOST', 'localhost')
    db_user = ENV.fetch('DB_USER', 'sa')
    db_pass = ENV.fetch('DB_PASS', '1m5ecure!')
    db_name = ENV.fetch('DB_NAME', 'YHSI')
    dc(
      *%w[exec db /opt/mssql-tools/bin/sqlcmd],
      *%W[-U #{db_user}],
      *%W[-P #{db_pass}],
      *%W[-H #{db_host}],
      *%W[-d #{db_name}],
      '-I', # enable quoted identifiers, e.g. "table"."column"
      *args,
      **kwargs
    )
  end

  define_method('ts-node') do |*args|
    dc(*%w[exec api npx ts-node], *args)
  end

  def test(*args)
    call(*args, environment: 'test')
  end
end

# Only execute main function when file is executed
if $PROGRAM_NAME == __FILE__
  DevHelper.call(*ARGV)
end
